generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  email     String?  @unique
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  blogs     Blog[]
  questions Question[]
  roadmaps  Roadmap[]
  bookmarks Bookmark[]
  badges    Badge[]
  comments  Comment[]
}

model Blog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comments  Comment[]
}

model Question {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  body      String
  tags      String[]
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
  votes     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comments  Comment[]
}

model Course {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  description String
  provider  String
  category  String
  isFree    Boolean
  url       String
  createdAt DateTime @default(now())
  bookmarks Bookmark[]
}

model Roadmap {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  data      Json
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime @default(now())
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
  blog      Blog?    @relation(fields: [blogId], references: [id])
  blogId    String?
  question  Question? @relation(fields: [questionId], references: [id])
  questionId String?
  createdAt DateTime @default(now())
}

model Bookmark {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  course    Course?  @relation(fields: [courseId], references: [id])
  courseId  String?
  createdAt DateTime @default(now())
}

model Badge {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime @default(now())
} 